{"version":3,"sources":["redux/episodes/reducers.js","redux/characters/reducers.js","redux/reducers.js","redux/store.js","components/Header/index.js","components/Collapse/index.js","components/Character/index.js","components/Episode/charactersList.js","utils/index.js","services/api.js","redux/characters/actions.js","redux/characters/fetch.js","components/Episode/index.js","components/AllEpisodes/error.js","redux/episodes/actions.js","redux/episodes/fetch.js","components/AllEpisodes/index.js","App.js","index.js"],"names":["initialState","error","perPage","pages","byId","combineReducers","episodes","state","action","type","allEpisodes","payload","results","forEach","episode","id","info","characters","allCharacters","character","store","createStore","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","Header","title","subtitle","className","defaultProps","Collapse","children","open","onChange","useState","isOpen","setIsOpen","useEffect","onClick","Character","name","image","src","alt","connect","propTypes","list","PropTypes","arrayOf","oneOfType","string","number","CharactersList","React","memo","map","key","getIdFromLink","link","splitted","split","length","API","baseURL","get","endpoint","data","params","fetch","charactersFailure","fetchCharacters","charactersToFetch","a","join","response","status","Error","json","dispatch","message","Episode","onOpenChange","air_date","episodeCharacters","useMemo","url","onOpen","useCallback","fetchedChars","Object","keys","filter","indexOf","fetchData","episodesFailure","fetchEpisodes","page","isAllOpen","setIsAllOpen","setPage","paginatedEpisodes","values","slice","handleShowAllClick","newIsOpen","flat","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da55f093.chunk.js","sourcesContent":["const initialState = {\n  error: false,\n  perPage: 20,\n  pages: 0,\n  byId: {}\n}\n\nexport const episodes = (state=initialState, action) => {\n  switch(action.type) {\n    case 'FETCH_EPISODES_SUCCESS':\n      const allEpisodes = state.byId\n      action.payload.results.forEach((episode) => {\n        allEpisodes[episode.id] = episode\n      })\n      state.pages = action.payload.info.pages\n      state.byId = allEpisodes\n      state.error = false\n      return {...state}\n\n    case 'FETCH_EPISODES_FAILURE':\n      state.error = action.error\n      return {...state}\n\n    default:\n      return state\n  }\n}","const initialState = {\n  error: false,\n  byId: {}\n}\n\nexport const characters = (state=initialState, action) => {\n  switch(action.type) {\n    case 'FETCH_CHARACTERS_SUCCESS':\n      const allCharacters = state.byId\n      action.payload.forEach((character) => {\n        allCharacters[character.id] = character\n      })\n      return {byId: allCharacters, error: false}\n\n    case 'FETCH_CHARACTERS_FAILURE':\n      state.error = action.error\n      return {...state}\n\n    default:\n      return state\n  }\n}","import { combineReducers } from \"redux\";\n\nimport { episodes } from \"./episodes/reducers\";\nimport { characters } from \"./characters/reducers\";\n\nexport default combineReducers({\n  episodes,\n  characters\n});","import { createStore } from 'redux';\nimport reducers from './reducers';\n\nexport const store = createStore(\n  reducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './style.scss'\n\nconst propTypes = {\n  /** Main text of the header */\n  title: PropTypes.string,\n  /** text under the title */\n  subtitle: PropTypes.string\n}\nconst defaultProps = {\n  title: '',\n  subtitle: ''\n}\n\nconst Header = ({title, subtitle}) => {\n  return (\n    <header className=\"header\">\n      <div className=\"header__body\">\n        <h1 className=\"header__title\">{title}</h1>\n        <span className=\"header__credits\">{subtitle}</span>\n      </div>\n    </header>\n  )\n}\n\nHeader.propTypes = propTypes\nHeader.defaultProps = defaultProps\n\nexport default Header","import React, { useCallback, useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport \"./style.scss\"\n\nconst propTypes = {\n  /** boolean to control state of collapse from outside */\n  open: PropTypes.bool,\n  /** function to raport up when state is changed */\n  onChange: PropTypes.func,\n  /** text to show in collapse head */\n  title: PropTypes.string,\n  /** class for collapse body */\n  className: PropTypes.string,\n}\nconst defaultProps = {\n  open: false,\n  onChange: () => {},\n  title: '',\n  className: ''\n}\n\nconst Collapse = ({children, open, onChange, title, className}) => {\n\n  const [isOpen, setIsOpen] = useState(open)\n\n  useEffect(() => {\n    setIsOpen(open)\n  }, [open])\n\n  const toggle = () => {\n    setIsOpen(!isOpen)\n    onChange(!isOpen)\n  }\n\n  return (\n    <div className={`collapse ${isOpen && 'collapse--open'}`}>\n      <div className=\"collapse__head\" onClick={toggle}>\n        { title }\n        <button className=\"collapse__button\">{isOpen ? '-' : '+'}</button>\n      </div>\n      <div className={`collapse__body ${className}`}>\n        { children }\n      </div>\n    </div>\n  )\n}\n\nCollapse.propTypes = propTypes\nCollapse.defaultProps = defaultProps\n\nexport default Collapse","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\n\nimport './style.scss'\n\nconst propTypes = {\n  /** ID of the character to show */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n}\nconst defaultProps = {\n  id: 0\n}\n\nconst Character = ({id, characters}) => {\n  const {name, image} = characters.byId[id] || {}\n\n  return (\n    <div className={`character ${characters.error && 'character--error'}`}>\n      <img src={image} alt={name} className=\"character__image\"/>\n      <div className=\"character__name\">{ name || `[ID: ${id}]` }</div>\n    </div>\n  )\n}\n\nCharacter.propTypes = propTypes\nCharacter.defaultProps = defaultProps\n\nexport default connect(({characters}) => ({characters}))(Character)","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Character from '../Character'\n\nconst propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  )\n}\nconst defaultProps = {\n  list: []\n}\n\nconst CharactersList = React.memo(({list}) => (\n  list.map((id) => (\n    <Character key={id} id={id} />\n  ))\n))\n\nCharactersList.propTypes = propTypes\nCharactersList.defaultProps = defaultProps\n\nexport default CharactersList","export const getIdFromLink = (link) => {\n  const splitted = link.split('/')\n  return splitted[splitted.length-1]\n}","const API = {\n  baseURL: 'https://rickandmortyapi.com/api',\n\n  get: (endpoint, data={}) => {\n    let params = '?'\n    for(const key in data) {\n      params += `${key}=${data[key]}&`\n    }\n\n    return fetch(`${API.baseURL}${endpoint}${params}`)\n  }\n}\n\nexport default API","export const charactersFetched = (characters) => ({\n  type: 'FETCH_CHARACTERS_SUCCESS',\n  payload: characters\n});\n\nexport const charactersFailure = (error) => ({\n  type: 'FETCH_CHARACTERS_FAILURE',\n  error\n});","import {store} from '../store'\nimport API from '../../services/api'\nimport {charactersFetched, charactersFailure} from './actions'\n\nexport const fetchCharacters = async (charactersToFetch) => {\n  if(charactersToFetch.length === 0) { return } // skip downloading when all fetched\n\n  try {\n    const response = await API.get(`/character/${charactersToFetch.join(',')}`)\n\n    if(response.status !== 200)\n      throw new Error(`Request failed with response status of ${response.status}`)\n\n    const data = await response.json()\n    store.dispatch(charactersFetched(data))\n  } catch(e) {\n    store.dispatch(charactersFailure(e.message))\n  }\n\n}","import React, { useMemo, useCallback } from 'react'\nimport {connect} from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport Collapse from '../Collapse'\nimport CharactersList from './charactersList'\n\nimport {getIdFromLink} from '../../utils'\n\nimport {fetchCharacters} from '../../redux/characters/fetch'\n\nimport './style.scss'\n\nconst propTypes = {\n  /** Object of the current episode */\n  episode: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    air_date: PropTypes.string,\n    characters: PropTypes.arrayOf(PropTypes.string),\n  }),\n  /** state to controll collapse from top */\n  open: PropTypes.bool,\n  /** function to raport of open */\n  onOpenChange: PropTypes.func,\n}\nconst defaultProps = {\n  episode: {\n    id: null,\n    name: '',\n    air_date: '',\n    characters: []\n  },\n  open: false,\n  onOpenChange: () => {}\n}\n\nconst Episode = ({episode, open, onOpenChange, characters}) => {\n\n  const { id, name, air_date } = episode\n\n  const episodeCharacters = useMemo(() => (\n    episode.characters.map((url) => getIdFromLink(url))\n  ), [episode.characters])\n\n  const onOpen = useCallback((isOpen) => {\n    onOpenChange(isOpen)\n\n    if(!isOpen) { return }\n    const fetchData = () => {\n      // Prevent do fetch characters that are already in redux\n      const fetchedChars = Object.keys(characters.byId)\n      const charactersToFetch = episodeCharacters.filter((id) => fetchedChars.indexOf(id) === -1)\n\n      fetchCharacters(charactersToFetch)\n    }\n    fetchData()\n  }, [characters, episodeCharacters, onOpenChange])\n\n  return (\n    <Collapse\n      title={`Episode ${id}`}\n      open={open}\n      onChange={onOpen}\n      className=\"episode\"\n    >\n      <ul className=\"episode__properties\">\n        <li><strong>ID</strong> <span>{id}</span></li>\n        <li><strong>Name</strong> <span>{name}</span></li>\n        <li><strong>Air date</strong> <span>{air_date}</span></li>\n        <li><strong>Episode</strong> <span>{episode.episode}</span></li>\n        <li><strong>Characters</strong></li>\n      </ul>\n      <div className=\"episode__characters\">\n        <CharactersList list={episodeCharacters} />\n      </div>\n    </Collapse>\n  )\n}\n\nEpisode.propTypes = propTypes\nEpisode.defaultProps = defaultProps\n\nexport default connect(({characters}) => ({characters}))(Episode)\n","import React from 'react'\n\nconst Error = ({message}) => (\n  <div className=\"error\">\n    <div className=\"error__title\">Error!</div>\n    <div className=\"error__message\">{message}</div>\n  </div>\n)\n\nexport default Error","export const episodesFetched = (episodes) => ({\n  type: 'FETCH_EPISODES_SUCCESS',\n  payload: episodes\n});\n\nexport const episodesFailure = (error) => ({\n  type: 'FETCH_EPISODES_FAILURE',\n  error\n});","import {store} from '../store'\nimport API from '../../services/api'\nimport {episodesFetched, episodesFailure} from './actions'\n\nexport const fetchEpisodes = async (page) => {\n  try {\n    const response = await API.get('/episode', {page})\n\n    if(response.status !== 200)\n      throw new Error(`Request failed with response status of ${response.status}`)\n\n    const data = await response.json()\n    store.dispatch(episodesFetched(data))\n  } catch(e) {\n    store.dispatch(episodesFailure(e.message))\n  }\n}","import React, { useEffect, useState, useMemo, useCallback } from 'react'\nimport {connect} from 'react-redux'\n\nimport Episode from '../Episode/index'\nimport Error from './error'\n\nimport {getIdFromLink} from '../../utils'\n\nimport {fetchCharacters} from '../../redux/characters/fetch'\nimport {fetchEpisodes} from '../../redux/episodes/fetch'\n\nimport './style.scss'\n\nconst AllEpisodes = ({episodes, characters}) => {\n  const [isAllOpen, setIsAllOpen] = useState(false)\n  const [page, setPage] = useState(1)\n\n\n\n  const paginatedEpisodes = useMemo(() => {\n    return Object\n      .values(episodes.byId)\n      .slice((page-1)*episodes.perPage, page*episodes.perPage)\n  }, [episodes, page])\n\n\n\n  useEffect(() => {\n    // Don't fetchs episodes that are already downloaded\n    if(Object.keys(episodes.byId).length > (page-1) * episodes.perPage) { return }\n    fetchEpisodes(page)\n  }, [page])\n\n\n\n  const handleShowAllClick = useCallback(() => {\n    const newIsOpen = !isAllOpen\n    setIsAllOpen(newIsOpen)\n\n    // Fetch missing characters when open all\n    if(newIsOpen) {\n      const fetchedChars = Object.keys(characters.byId)\n\n      const charactersToFetch = paginatedEpisodes\n        .map((episode) => episode.characters) // Get only charachters url\n        .flat() // flat array\n        .map((url) => getIdFromLink(url)) // replace urls by id\n        .filter((id) => fetchedChars.indexOf(id) === -1) // get only that id's that are not fetched yet\n\n      fetchCharacters(charactersToFetch)\n    }\n  }, [isAllOpen, characters, paginatedEpisodes])\n\n\n\n  return (\n    <div className=\"episodes-list\">\n      <h2 className=\"episodes-list__title\">\n        All Episodes:\n        <span\n          className=\"link\"\n          onClick={handleShowAllClick}\n        >\n          {isAllOpen ? 'collapse all' : 'show all'}\n        </span>\n      </h2>\n\n      <div className=\"episodes-list__episodes\">\n\n        { episodes.error &&\n          <Error message={episodes.error} />\n        }\n\n        {\n          paginatedEpisodes.map((episode) => (\n            <Episode\n              key={episode.id}\n              episode={episode}\n              open={isAllOpen}\n              onOpenChange={() => {}}\n            />\n          ))\n        }\n      </div>\n\n      <div className=\"episodes-list__pagination\">\n        <span\n          className={`link ${page === 1 && 'link--disabled'}`}\n          onClick={() => {setPage(page-1); setIsAllOpen(false)}}\n        >\n          prev page\n        </span>\n        {' |'}\n        <span\n          className={`link ${page === episodes.pages && 'link--disabled'}`}\n          onClick={() => {setPage(page+1); setIsAllOpen(false)}}\n        >\n          next page\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default connect(({episodes, characters}) => ({episodes, characters}))(AllEpisodes)\n","import React from \"react\";\n\nimport Header from './components/Header'\nimport AllEpisodes from './components/AllEpisodes'\n\nimport \"./App.scss\";\n\n/**\n * The App\n */\nconst App = () => {\n  return (\n    <div>\n      <Header\n        title=\"Rick and Morty app\"\n        subtitle=\"Created by Artur Mędrygał\"\n      />\n      <div className=\"container\">\n        <AllEpisodes />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// IE11 Polyfills\nimport 'react-app-polyfill/ie11'\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport {store} from './redux/store'\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}