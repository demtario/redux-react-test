{"version":3,"sources":["redux/episodes/reducers.js","redux/characters/reducers.js","redux/reducers.js","redux/store.js","components/Header/index.js","services/api.js","components/Collapse/index.js","components/Character/index.js","components/Episode/charactersList.js","utils/index.js","redux/characters/actions.js","components/Episode/index.js","redux/episodes/actions.js","components/AllEpisodes/index.js","App.js","index.js"],"names":["initialState","perPage","pages","byId","combineReducers","episodes","state","action","type","allEpisodes","payload","results","forEach","episode","id","info","characters","allCharacters","character","store","createStore","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","Header","title","subtitle","className","defaultProps","API","baseURL","get","endpoint","data","params","key","fetch","Collapse","children","open","onChange","useState","isOpen","setIsOpen","useEffect","toggle","useCallback","onClick","Character","name","image","src","alt","connect","propTypes","list","PropTypes","arrayOf","oneOfType","string","number","CharactersList","React","memo","map","getIdFromLink","link","splitted","split","length","charactersFetched","Episode","onOpenChange","dispatch","air_date","episodeCharacters","useMemo","url","onOpen","a","fetchedChars","Object","keys","charactersToFetch","filter","indexOf","join","response","json","fetchData","episodesFetched","isAllOpen","setIsAllOpen","page","setPage","paginatedEpisodes","values","slice","handleShowAllClick","newIsOpen","flat","App","ES6Promise","polyfill","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f27afc3.chunk.js","sourcesContent":["const initialState = {\r\n  perPage: 20,\r\n  pages: 0,\r\n  byId: {}\r\n}\r\n\r\nexport const episodes = (state=initialState, action) => {\r\n  switch(action.type) {\r\n    case 'FETCH_EPISODES_SUCCESS':\r\n        const allEpisodes = state.byId\r\n        action.payload.results.forEach((episode) => {\r\n          allEpisodes[episode.id] = episode\r\n        })\r\n        state.pages = action.payload.info.pages\r\n        state.byId = allEpisodes\r\n      return {...state}\r\n    default:\r\n      return state\r\n  }\r\n}","const initialState = {\r\n  byId: {}\r\n}\r\n\r\nexport const characters = (state=initialState, action) => {\r\n  switch(action.type) {\r\n    case 'FETCH_CHARACTERS_SUCCESS':\r\n      const allCharacters = state.byId\r\n      action.payload.forEach((character) => {\r\n        allCharacters[character.id] = character\r\n      })\r\n      return {byId: allCharacters}\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\n\r\nimport { episodes } from \"./episodes/reducers\";\r\nimport { characters } from \"./characters/reducers\";\r\n\r\nexport default combineReducers({\r\n  episodes,\r\n  characters\r\n});","import { createStore } from 'redux';\r\nimport reducers from './reducers';\r\n\r\nexport const store = createStore(\r\n  reducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './style.scss'\r\n\r\nconst propTypes = {\r\n  /** Main text of the header */\r\n  title: PropTypes.string,\r\n  /** text under the title */\r\n  subtitle: PropTypes.string\r\n}\r\nconst defaultProps = {\r\n  title: '',\r\n  subtitle: ''\r\n}\r\n\r\nconst Header = ({title, subtitle}) => {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header__body\">\r\n        <h1 className=\"header__title\">{title}</h1>\r\n        <span className=\"header__credits\">{subtitle}</span>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nHeader.propTypes = propTypes\r\nHeader.defaultProps = defaultProps\r\n\r\nexport default Header","const API = {\r\n  baseURL: 'https://rickandmortyapi.com/api',\r\n\r\n  get: (endpoint, data={}) => {\r\n    let params = '?'\r\n    for(const key in data) {\r\n      params += `${key}=${data[key]}&`\r\n    }\r\n\r\n    return fetch(`${API.baseURL}${endpoint}${params}`)\r\n  }\r\n}\r\n\r\nexport default API","import React, { useCallback, useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport \"./style.scss\"\r\n\r\nconst propTypes = {\r\n  /** boolean to control state of collapse from outside */\r\n  open: PropTypes.bool,\r\n  /** function to raport up when state is changed */\r\n  onChange: PropTypes.func,\r\n  /** text to show in collapse head */\r\n  title: PropTypes.string,\r\n  /** class for collapse body */\r\n  className: PropTypes.string,\r\n}\r\nconst defaultProps = {\r\n  open: false,\r\n  onChange: () => {},\r\n  title: '',\r\n  className: ''\r\n}\r\n\r\nconst Collapse = ({children, open, onChange, title, className}) => {\r\n\r\n  const [isOpen, setIsOpen] = useState(open)\r\n\r\n  useEffect(() => {\r\n    setIsOpen(open)\r\n  }, [open])\r\n\r\n  const toggle = useCallback(() => {\r\n    setIsOpen(!isOpen)\r\n    onChange(!isOpen)\r\n  }, [isOpen, onChange])\r\n\r\n  return (\r\n    <div className={`collapse ${isOpen && 'collapse--open'}`}>\r\n      <div className=\"collapse__head\" onClick={toggle}>\r\n        { title }\r\n        <button className=\"collapse__button\">{isOpen ? '-' : '+'}</button>\r\n      </div>\r\n      <div className={`collapse__body ${className}`}>\r\n        { children }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nCollapse.propTypes = propTypes\r\nCollapse.defaultProps = defaultProps\r\n\r\nexport default Collapse","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './style.scss'\r\n\r\nconst propTypes = {\r\n  /** ID of the character to show */\r\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n}\r\nconst defaultProps = {\r\n  id: 0\r\n}\r\n\r\nconst Character = ({id, characters}) => {\r\n  const {name, image} = characters.byId[id] || {}\r\n\r\n  return (\r\n    <div className=\"character\">\r\n      <img src={image} alt={name} className=\"character__image\"/>\r\n      <div className=\"character__name\">{ name || `[ID: ${id}]` }</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nCharacter.propTypes = propTypes\r\nCharacter.defaultProps = defaultProps\r\n\r\nexport default connect(({characters}) => ({characters}))(Character)","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Character from '../Character'\r\n\r\nconst propTypes = {\r\n  list: PropTypes.arrayOf(\r\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n  )\r\n}\r\nconst defaultProps = {\r\n  list: []\r\n}\r\n\r\nconst CharactersList = React.memo(({list}) => (\r\n  list.map((id) => (\r\n    <Character key={id} id={id} />\r\n  ))\r\n))\r\n\r\nCharactersList.propTypes = propTypes\r\nCharactersList.defaultProps = defaultProps\r\n\r\nexport default CharactersList","export const getIdFromLink = (link) => {\r\n  const splitted = link.split('/')\r\n  return splitted[splitted.length-1]\r\n}","export const charactersFetched = (characters) => ({\r\n  type: 'FETCH_CHARACTERS_SUCCESS',\r\n  payload: characters\r\n});","import React, { useMemo, useCallback } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport API from '../../services/api'\r\n\r\nimport Collapse from '../Collapse'\r\nimport CharactersList from './charactersList'\r\n\r\nimport {getIdFromLink} from '../../utils'\r\n\r\nimport {charactersFetched} from '../../redux/characters/actions'\r\n\r\nimport './style.scss'\r\nconst propTypes = {\r\n  /** Object of the current episode */\r\n  episode: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    name: PropTypes.string,\r\n    air_date: PropTypes.string,\r\n    characters: PropTypes.arrayOf(PropTypes.string),\r\n  }),\r\n  /** state to controll collapse from top */\r\n  open: PropTypes.bool,\r\n  /** function to raport of open */\r\n  onOpenChange: PropTypes.func,\r\n}\r\nconst defaultProps = {\r\n  episode: {\r\n    id: null,\r\n    name: '',\r\n    air_date: '',\r\n    characters: []\r\n  },\r\n  open: false,\r\n  onOpenChange: () => {}\r\n}\r\n\r\nconst Episode = ({episode, open, onOpenChange, dispatch, characters}) => {\r\n\r\n  const { id, name, air_date } = episode\r\n\r\n  const episodeCharacters = useMemo(() => (\r\n    episode.characters.map((url) => getIdFromLink(url))\r\n  ), [episode.characters])\r\n\r\n  const onOpen = useCallback((isOpen) => {\r\n    onOpenChange(isOpen)\r\n\r\n    if(!isOpen) { return }\r\n    const fetchData = async () => {\r\n      // Prevent do fetch characters that are already in redux\r\n      const fetchedChars = Object.keys(characters.byId)\r\n      const charactersToFetch = episodeCharacters.filter((id) => fetchedChars.indexOf(id) === -1)\r\n\r\n      if(charactersToFetch.length === 0) { return } // skip downloading when all fetched\r\n\r\n      const response = await API.get(`/character/${charactersToFetch.join(',')}`)\r\n      const data = await response.json()\r\n      dispatch(charactersFetched(data))\r\n    }\r\n    fetchData()\r\n  }, [characters, episodeCharacters, onOpenChange])\r\n\r\n  return (\r\n    <Collapse\r\n      title={`Episode ${id}`}\r\n      open={open}\r\n      onChange={onOpen}\r\n      className=\"episode\"\r\n    >\r\n      <ul className=\"episode__properties\">\r\n        <li><strong>ID</strong> <span>{id}</span></li>\r\n        <li><strong>Name</strong> <span>{name}</span></li>\r\n        <li><strong>Air date</strong> <span>{air_date}</span></li>\r\n        <li><strong>Episode</strong> <span>{episode.episode}</span></li>\r\n        <li><strong>Characters</strong></li>\r\n      </ul>\r\n      <div className=\"episode__characters\">\r\n        <CharactersList list={episodeCharacters} />\r\n      </div>\r\n    </Collapse>\r\n  )\r\n}\r\n\r\nEpisode.propTypes = propTypes\r\nEpisode.defaultProps = defaultProps\r\n\r\nexport default connect(({characters}) => ({characters}))(Episode)\r\n","export const episodesFetched = (episodes) => ({\r\n  type: 'FETCH_EPISODES_SUCCESS',\r\n  payload: episodes\r\n});","import React, { useEffect, useState, useMemo, useCallback } from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport API from '../../services/api'\r\nimport Episode from '../Episode/index'\r\n\r\nimport {getIdFromLink} from '../../utils'\r\n\r\nimport {episodesFetched} from '../../redux/episodes/actions'\r\nimport {charactersFetched} from '../../redux/characters/actions'\r\n\r\nimport './style.scss'\r\n\r\nconst AllEpisodes = ({episodes, characters, dispatch}) => {\r\n  const [isAllOpen, setIsAllOpen] = useState(false)\r\n  const [page, setPage] = useState(1)\r\n\r\n\r\n\r\n  const paginatedEpisodes = useMemo(() => {\r\n    return Object\r\n      .values(episodes.byId)\r\n      .slice((page-1)*episodes.perPage, page*episodes.perPage)\r\n  }, [episodes, page])\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // Don't fetchs episodes that are already downloaded\r\n    if(Object.keys(episodes.byId).length > (page-1) * episodes.perPage) { return }\r\n\r\n    const fetchData = async () => {\r\n      const response = await API.get('/episode', {page})\r\n      const data = await response.json()\r\n      dispatch(episodesFetched(data))\r\n    }\r\n    fetchData()\r\n  }, [page])\r\n\r\n\r\n\r\n  const handleShowAllClick = useCallback(async () => {\r\n    const newIsOpen = !isAllOpen\r\n    setIsAllOpen(newIsOpen)\r\n\r\n    // Fetch missing characters when open all\r\n    if(newIsOpen) {\r\n      const fetchedChars = Object.keys(characters.byId)\r\n\r\n      const charactersToFetch = paginatedEpisodes\r\n        .map((episode) => episode.characters) // Get only charachters url\r\n        .flat() // flat array\r\n        .map((url) => getIdFromLink(url)) // replace urls by id\r\n        .filter((id) => fetchedChars.indexOf(id) === -1) // get only that id's that are not fetched yet\r\n\r\n      if(charactersToFetch.length === 0) { return } // skip downloading when all fetched\r\n\r\n      const response = await API.get(`/character/${charactersToFetch.join(',')}`)\r\n      const data = await response.json()\r\n      dispatch(charactersFetched(data))\r\n    }\r\n  }, [isAllOpen, characters, paginatedEpisodes])\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"episodes-list\">\r\n      <h2 className=\"episodes-list__title\">\r\n        All Episodes:\r\n        <span\r\n          className=\"link\"\r\n          onClick={handleShowAllClick}\r\n        >\r\n          {isAllOpen ? 'collapse all' : 'show all'}\r\n        </span>\r\n      </h2>\r\n\r\n      <div className=\"episodes-list__episodes\">\r\n        {\r\n          paginatedEpisodes.map((episode) => (\r\n            <Episode\r\n              key={episode.id}\r\n              episode={episode}\r\n              open={isAllOpen}\r\n              onOpenChange={() => {}}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n\r\n      <div className=\"episodes-list__pagination\">\r\n        <span\r\n          className={`link ${page === 1 && 'link--disabled'}`}\r\n          onClick={() => setPage(page-1)}\r\n        >\r\n          prev page\r\n        </span>\r\n        {' |'}\r\n        <span\r\n          className={`link ${page === episodes.pages && 'link--disabled'}`}\r\n          onClick={() => setPage(page+1)}\r\n        >\r\n          next page\r\n        </span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(({episodes, characters}) => ({episodes, characters}))(AllEpisodes)\r\n","import React from \"react\";\r\n\r\nimport Header from './components/Header'\r\nimport AllEpisodes from './components/AllEpisodes'\r\n\r\nimport \"./App.scss\";\r\n\r\n/**\r\n * The App\r\n */\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Header\r\n        title=\"Rick and Morty app\"\r\n        subtitle=\"Created by Artur Mędrygał\"\r\n      />\r\n      <main className=\"container\">\r\n        <AllEpisodes />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\n// Promise & fetch polyfill\r\nimport 'isomorphic-fetch'\r\nimport ES6Promise from 'es6-promise'\r\n\r\nimport {store} from './redux/store'\r\nimport App from \"./App\";\r\n\r\nES6Promise.polyfill()\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}